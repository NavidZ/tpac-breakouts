{
  "title": "New Module types: JSON, CSS, HTML",
  "proposer": {
    "login": "daniec",
    "name": "Daniel Clark",
    "email": "daniec@microsoft.com"
  },
  "summary": "Introduce JSON, CSS, and HTML modules and discuss open issues",
  "type": "Talk followed by open discussion",
  "goals": ["Introduce and provide motivation for new JSON, CSS, and HTML module types."," Share status of the proposals and implementations.", "Discuss open design questions."],
  "others": [],
  "capacity": "medium",
  "track": "core",
  "report": "<p>This session opened by introducing proposals for JSON, CSS, and HTML modules, in which the JavaScript module infrastructure is expanded to allow developers to 'import' content of those types in addition to JavaScript.  The new modules would participate in the module graph and share all of its benefits: static resolution of dependencies, parallelized loading without extra work by the developer, clear definition of components/API surfaces, and assurance that duplicate dependencies are only processed a single time.</p><p>The following 3 open design questions were then introduced and discussed:</p><ol type='A'><li>How should CSS module @imports be handled?  Option 1 is to treat @import references in the normal way where each creates a distinct stylesheet reference.  Option 2 is to treat @imports as CSS modules in their own right such that duplicate imports share the same CSSStyleSheet identity.  The latter option has use cases for theme switching, where replacing the contents of an imported stylesheet will fan out to all locations where it is imported.  Some developers have already rolled their own solutions for doing this sort of theme switching so it seems there are uses cases here.</li><li>Should HTML modules be limited to static content, or should they be allowed to contain &lt;script> and &lt;style> elements that are interpreted as its child modules?  The latter option allows developers to build web components with HTML on top, sort of like small web pages.  There was some interest from the room in this approach.</li><li>Using MIME type to determine module type poses security concerns because a compromised distributor could send JavaScript instead of JSON/CSS back to the importer, which would then execute in the importer's domain.  CSP was proposed as a solution, but there were concerns about this being opt-in.  Other solutions involve specifying the resource type as part of the import statement, though the best way to do this is not yet clear.</li></ol>"
}
